apiVersion: nginx.tsuru.io/v1alpha1
kind: Nginx
metadata:
  name: my-secured-nginx
spec:
  image: nginx:stable-alpine # if unspecified, defaults to "nginx:latest"
  healthcheckPath: /healthz  # if unspecified, doesn't set readiness probes on nginx pods
  tls:
  - secretName: my-ecdsa-cert # TLS secret name (defined below)
  - secretName: my-rsa-cert   # another TLS secret
  config:
    kind: Inline
    value: |-
      events {}

      http {
        default_type text/plain;

        server {
          listen 8080 default_server;
          listen 8443 ssl http2 default_server;

          if ($https != 'on') {
            return 301 'https://${host}${request_uri}';
          }

          ssl_certificate     ./certs/my-ecdsa-cert/tls.crt;
          ssl_certificate_key ./certs/my-ecdsa-cert/tls.key;

          ssl_certificate     ./certs/my-rsa-cert/tls.crt;
          ssl_certificate_key ./certs/my-rsa-cert/tls.key;

          location / {
            return 302 '/greeting?name=world';
          }

          location = /greeting {
            set $name ${arg_name};

            if ($name = '') {
              set $name 'anonymous';
            }

            return 200 'Hello, ${name}!\n';
          }

          location = /healthz {
            access_log off;
            return 200 'WORKING\n';
          }
        }
      }
---
# TLS certificate generated with:
#   go run $(go env GOROOT)/src/crypto/tls/generate_cert.go -start-date 'Jan 1 00:00:00 2021' -duration 87600h -host www.example.com -ecdsa-curve P256
apiVersion: v1
kind: Secret
metadata:
  name: my-ecdsa-cert
type: kubernetes.io/tls
stringData:
  tls.crt: |-
    -----BEGIN CERTIFICATE-----
    MIIBdDCCARqgAwIBAgIRAMHWSrfn5ZB6ezDs87DIXJkwCgYIKoZIzj0EAwIwEjEQ
    MA4GA1UEChMHQWNtZSBDbzAeFw0yMTAxMDEwMDAwMDBaFw0zMDEyMzAwMDAwMDBa
    MBIxEDAOBgNVBAoTB0FjbWUgQ28wWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAS/
    0vzn2c34c45YoksxMSAJjfpQyStu9BkmC1t7jxWkP1b98Od5oGrbGbo/4puuG4IG
    mluIXBspPEanQTaQsXvHo1EwTzAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYI
    KwYBBQUHAwEwDAYDVR0TAQH/BAIwADAaBgNVHREEEzARgg93d3cuZXhhbXBsZS5j
    b20wCgYIKoZIzj0EAwIDSAAwRQIgBHJQU40Fid69Hm+52QTa5v0mfVriSDiR++EW
    LtCbRs4CIQDLImCMhliyIFSjd8NEVaY/r0/yng9yxWe6Hu5VHWdpow==
    -----END CERTIFICATE-----
  tls.key: |-
    -----BEGIN PRIVATE KEY-----
    MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgTQOe2XRJecfGGbNH
    45lYAKZXpKMw1P5iGHDW+0P30+GhRANCAAS/0vzn2c34c45YoksxMSAJjfpQyStu
    9BkmC1t7jxWkP1b98Od5oGrbGbo/4puuG4IGmluIXBspPEanQTaQsXvH
    -----END PRIVATE KEY-----
---
# TLS certificate generated with:
#   go run $(go env GOROOT)/src/crypto/tls/generate_cert.go -start-date 'Jan 1 00:00:00 2021' -duration 87600h -host www.example.com -rsa-bits 2048
apiVersion: v1
kind: Secret
metadata:
  name: my-rsa-cert
type: kubernetes.io/tls
stringData:
  tls.crt: |-
    -----BEGIN CERTIFICATE-----
    MIIC/zCCAeegAwIBAgIQJKzZzFX2lwtGlsY/YDXhBDANBgkqhkiG9w0BAQsFADAS
    MRAwDgYDVQQKEwdBY21lIENvMB4XDTIxMDEwMTAwMDAwMFoXDTMwMTIzMDAwMDAw
    MFowEjEQMA4GA1UEChMHQWNtZSBDbzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC
    AQoCggEBAJ6xociK7Chs9MgDjuqs1vxSp1KYr8f70bZkLPDm3e4lqAkqTm8nBoN3
    BkIxUJrc/MiQdOrvJ4wKGc2YGD5vt9+F1uRMcDOWWBKoh1m+eHqwme7XyZkIPfD5
    tBTwGGVOuBHl1i158BPa6w2QQqdxh9sTJRYzusAX3BDEEBTV0Tck97us8CEvIEiy
    U39Ok+40K+4T4wOXPKyFQKD1MwucNkfoFJedoDV1eogXnznPWbDQuZdHLNLXECBm
    kcyQyvMuNKJ8ALxZpdTanEdiRVgFKFxCOAcxwNy5+7tcw6mLFL40YujnyLOonFsX
    1/2kSXytlCYOZSwgJZiaOuLpERxwcHECAwEAAaNRME8wDgYDVR0PAQH/BAQDAgWg
    MBMGA1UdJQQMMAoGCCsGAQUFBwMBMAwGA1UdEwEB/wQCMAAwGgYDVR0RBBMwEYIP
    d3d3LmV4YW1wbGUuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQBzSs3PAeowIlN9j28L
    F1zg5Xh4GdiBc6sWofbmv24GVFTKwJovJguVA9PSpDj1kU2mrkoOrsNjxIv+UN4Y
    Tf2aSvjVj78jtsl5CoRx5G79KdjCFIhNLd38tl6dA5PIgfe98K9eTsNMLnEZ5mcp
    iMPrxX/8YYF7sdi9EcJJYz3p45VkqDh1sUC/s+M/onNbFn70HzDlEOez7Kdan2Hp
    C3/bCKx0f46z2GtWbslaZ9DSx/kLrjfSSgRQDExhmX2bCCRU1W5jmWXIjOHJQtvp
    sTEzjnpdBDLcukzwvkUSXJlZPghYFyY7iZpWbZysErtl0PY6B8dNP7pzqXgyfRCc
    bSW2
    -----END CERTIFICATE-----
  tls.key: |-
    -----BEGIN PRIVATE KEY-----
    MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCesaHIiuwobPTI
    A47qrNb8UqdSmK/H+9G2ZCzw5t3uJagJKk5vJwaDdwZCMVCa3PzIkHTq7yeMChnN
    mBg+b7ffhdbkTHAzllgSqIdZvnh6sJnu18mZCD3w+bQU8BhlTrgR5dYtefAT2usN
    kEKncYfbEyUWM7rAF9wQxBAU1dE3JPe7rPAhLyBIslN/TpPuNCvuE+MDlzyshUCg
    9TMLnDZH6BSXnaA1dXqIF585z1mw0LmXRyzS1xAgZpHMkMrzLjSifAC8WaXU2pxH
    YkVYBShcQjgHMcDcufu7XMOpixS+NGLo58izqJxbF9f9pEl8rZQmDmUsICWYmjri
    6REccHBxAgMBAAECggEAeMWO7mRrncht8dpjZc3sP1NX69Av1u6ah0htu1i4BYm6
    /F6qGoWEu4BVzwJg6brM1oa5tCIV4sm9IW5i5QF42i+tf0l9CoWcuXZwq6f9YMIO
    JGstDb3sBfzDRDwFFPR3uYdFHI70Wuf8gvILCAuq7NsBGoh7071UyZ2s725aLrBM
    h45LaH5c0+V0xSoSxi0l/0nzaqEg0Hl2/elaiZ2zT5IBBKVumdpr7cKL3uo6polB
    zpgjs787Z9aaOBb/qECRGYs4QS2kyTtdyEmgUT7hMiBmOh3+1NXVl4aGAhpK28PV
    mK4AtBWYxiQvvNZWSW4Clk1XUTT6ogBBsQx5cL900QKBgQDASDMajU03S72KWBvM
    YwS1HWIZDU5diK8lcRw6aPc7YRGrEIpAADRahKLXqhD2l3kAj1yIrkp2OaaQsVeL
    hBnOOt/djCohQQ5txKMnDFs0moy1/b/Iut3WEHDWvsDD5t5Lh3IlgNK85KGrbXAs
    s9P2cAVR7aMYjLkbMnkX2e5XTwKBgQDTSA8esclzdSHoxx6eUPsMPKq2X2Eu37P8
    jteiaSgbNfo8U1NAWQOVsh7ZangkjtIwHGq+CGgkgqbII8ddNSPqGYd5X/4Mf24d
    NHcXwIJq6bcwjqtOp9Idl49yQyIfIBBCOeDCvm8R+FsVivpiTa7+aPu4xZSUiQAg
    hjb3kerMPwKBgD8nN4mwAT15Je7LU44Es6Yc2Xxq72MvIn+EsAXLNfCNyDTMQOwW
    ZRuZ1rZIyDuFsptperX1sMU12CxL4voS0Dr5AVAN2kSDzo5k+EU5/LbBUBfyGMx/
    +550VetiSYPOTxK1kNsafZzG5wab8izsf2DAmC65g0jr51w0bqtTy8FnAoGBAIKF
    U4Hcxtxike4hhFK9KDmpCLTdO0YfwCrXe3LDj5kvwUSfHSD1XHePr+sUEOBUspgy
    FecLfnp/k9Sz9aco+uTVnJFosaK63iWAkcnEjUzK0PZYTI+ssOrDBETMIDomLqUa
    6DSmPCtXx70JPCCaaO6VoFvHA0C3WbK99xr9s5U1AoGAV+nyUxsoiX/OXHEvp5R8
    8EPPm8B/lUWlVTLW0p3jpeG2R8tB/qh33M3MJmUjf5LBZOvbNBQPnVXNfWeo4p8N
    gExPrJ6FMR5uzQ/rwc2Dhx3lxB/f2QaOhs8Zn/Nv8k6vwGxqrEG5T6IRmWp4It6u
    mKlDHmDO7rr7LOAHAAd3NtA=
    -----END PRIVATE KEY-----
